{
    "contents" : "library(shiny)\nlibrary(httr)\nlibrary(XML)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\nrequire(gtable)\nlibrary(dplyr)\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n  \n  observeEvent(input$do, {\n    \n    \n    output$histrent <- renderPlot({\n      \n      bedMin <- reactive({bMi=input$minBed})\n      bedMax <- reactive({bMa=input$maxBed})\n      \n      furnished       <- reactive({fur=input$furnished}) \n      includeRented   = \"true\"\n      pageSize        = \"100\"\n      priceFreq       = \"per_month\"\n      priceMin        <- reactive({pMi=input$minPr}) \n      priceMax        <- reactive({pMa=input$maxPr}) \n      searchRad       <- reactive({sRad=input$searchR})\n      \n      # loc=\"Oxford%20Station%2C%20Oxfordshire\"\n      loc=\"Reading%20Station\"\n       \n      url <- \"http://www.zoopla.co.uk/to-rent/flats/station/rail/reading/\"\n      response <- GET(url,query=list(\n        beds_max=bedMax(),\n        beds_min=bedMin(),\n        furnished_state=furnished(),\n        include_rented=includeRented,\n        page_size=pageSize,\n        price_frequency=priceFreq,\n        price_min=priceMin(),\n        price_max=priceMax(),\n        q=loc,\n        radius=searchRad()\n      ))\n      \n      html <- htmlTreeParse(response, useInternalNodes = T)\n      rootNode <- xmlRoot(html)\n      hrefs = xpathSApply(html, '//*[@class=\"listing-results-attr\"]/a',xmlGetAttr,'href')\n      stations = unique(xpathSApply(html,\"//*[@class='nearby_stations_schools_name']\",xmlValue))\n      nbed =  data.frame(as.integer(xpathSApply(html, '//*[@class=\"num-icon num-beds\"]',xmlValue)))\n      colnames(nbed) = 'number_of_bedrooms'\n      \n      price = xpathSApply(html,\"//div[@class='listing-results-right']\",xmlValue)\n      # price =  xpathSApply(html, '//*[@class=\"listing-results-price text-price\"]',xmlValue)\n      price <- gsub(\"^.*\\\\£ *(.*) * pcm.*$\", \"\\\\1\", price)\n      price <- as.numeric(gsub(\",\",\"\", price))\n      \n      \n      if(length(price) < 5) {\n        output$pErr <- renderText({ \n          paste(\"less than 5 properties found in this price range. Try increasing Max Price\")\n        })\n        output$meanTxt <- renderText({paste(\"\")})\n        output$medTxt  <- renderText({paste(\"\")})\n      } else {\n        \n        bed.df <- data.frame(price,nbed)\n        bed.df$number_of_bedrooms <- gsub('([0-9])',\"\\\\1 bedroom\", bed.df$number_of_bedrooms)\n        \n        countTot<-aggregate(bed.df[, 1], list(bed.df$number_of_bedrooms), function(x) length(unique(x)))\n        colnames(countTot)=c('Number of Bedrooms','Total Number of Properties')\n        meanPrice<-aggregate(bed.df[, 1], list(bed.df$number_of_bedrooms), mean)\n        colnames(meanPrice)=c('Number of Bedrooms','Average Price (£)')\n        medPrice<-aggregate(bed.df[, 1], list(bed.df$number_of_bedrooms), median)\n        colnames(medPrice)=c('Number of Bedrooms','Median Price (£)')\n        allPrice <- merge(meanPrice,medPrice,by='Number of Bedrooms')\n        allPrice <- merge(allPrice,countTot,by='Number of Bedrooms')\n        \n        g<- ggplot(bed.df, aes(price, fill = number_of_bedrooms)) + geom_density(alpha = 0.5) \n        g<- ggplotGrob(g)  \n        g<- gtable_add_rows(g, unit(1.5,\"in\"), 0) \n        g<- gtable_add_grob(g, tableGrob(allPrice, rows = rownames(allPrice), cols = colnames(allPrice)),\n                             t = 1, l=4, b=1, r=4)\n        g<- gtable_add_rows(g, unit(1,\"in\"), 0) \n        histtitle = paste(\"Properties near\",loc,\"(sourced from Zoopla)\",sep=\" \")\n        title_style <- g$grobs[[8]]$gp\n        g <- gtable_add_grob(g, textGrob(histtitle, x=0, hjust=0, gp=title_style),\n                              t=1, l=4, b=1, r=4, name=\"hist-title\")\n        \n        # grid.newpage()\n        # grid.draw(g)\n        \n        output$pErr    <- renderText({paste(\"\")})\n        \n        #Now Query Google maps for transit times from this area\n        \n        #get nearby stations to properties \n        stations = unique(xpathSApply(html,\"//*[@class='nearby_stations_schools_name']\",xmlValue))\n        gStations = paste(stations, collapse = '|') \n        \n        \n        mode=\"transit\"\n        transit_mode=\"rail\"\n        to=\"Farringdon\"\n        from=gStations\n        region=\"uk\"\n        key=\"AIzaSyDi5gaiVz3Eq3xMg6ndUC5X3bhQLxY_F4w\" \n        url    <- \"https://maps.googleapis.com/maps/api/distancematrix/xml\"\n        response <- GET(url,query=list(\n          origins=from,\n          destinations=to,\n          region=region,\n          mode=mode,\n          transit_mode=transit_mode,\n          key=key\n        ))\n        doc      <- content(response,type=\"text/xml\")\n        status   <- sapply(doc[\"//row/element/status\"],xmlValue)\n        if(any(status!=\"OK\")) warning(\"Error Status on some routes\")\n        durationText <- sapply(doc[\"//row/element/duration/text\"],xmlValue)\n        durationNum <- as.numeric(sapply(doc[\"//row/element/duration/value\"],xmlValue))/60\n        \n        print(durationText)\n        \n        df_train<- data.frame(stations,durationText,as.integer(durationNum))\n        colnames(df_train) = c(\"Stations\", \"Total Transit time\", \"(mins)\") \n        \n        tt <- tableGrob(df_train)\n        # grid.newpage()\n        grid.arrange(g,tt,nrow=2,ncol=1)\n        \n\n      }\n    }, height = 700, width = 600)\n    \n#     output$transtable <- renderPlot({\n#       \n#       \n#     })\n    \n  })\n})\n",
    "created" : 1449176126248.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3768189814",
    "id" : "D7DDDC35",
    "lastKnownWriteTime" : 1449428991,
    "path" : "~/GitHub/app/testing/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}