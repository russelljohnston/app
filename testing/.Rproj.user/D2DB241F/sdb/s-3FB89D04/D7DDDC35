{
    "contents" : "library(shiny)\nlibrary(httr)\nlibrary(XML)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\nrequire(gtable)\nlibrary(dplyr)\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n  \n  observeEvent(input$do, {\n    \n    bedMin     <- reactive({bMi=input$minBed})\n    bedMax     <- reactive({bMa=input$maxBed})\n    furnished  <- reactive({fur=input$furnished})\n    priceMin   <- reactive({pMi=input$minPr/4.})\n    priceMax   <- reactive({pMa=input$maxPr/4.})\n    searchRad  <- reactive({sRad=input$searchR})\n    loc        <- reactive({locc=input$location})\n    propType   <- reactive({pTy=input$type})\n  \n    \n    key <- \"fzzfvsuf37rgy8k2vfruxcwd\"\n    \n    listing_status=\"rent\"\n    url=\"http://api.zoopla.co.uk/api/v1/property_listings.xml\"\n    \n    sample <- GET(url,  query = list(\n      area = loc(),\n      listing_status=\"rent\",\n      page_size=100,\n      page_number=1,\n      property_type=propType(),\n      furnished=furnished(),\n      minimum_beds=bedMin(),\n      maximum_beds=bedMax(),\n      minimum_price=priceMin(),\n      maximum_price=priceMax(),\n      radius=searchRad(),\n      summarised=\"true\",\n      order_by=\"age\",\n      include_rented=1,\n      api_key = key))\n    \n    result   <- content(sample)\n    rootNode <- xmlRoot(result)\n    price    <- data.frame(as.numeric(xpathSApply(rootNode,\"//rental_prices/per_month\",xmlValue)))\n    colnames(price) = 'price'\n    nbed     <- data.frame(as.integer(xpathSApply(rootNode,\"//num_bedrooms\",xmlValue)))\n    colnames(nbed) = 'number_of_bedrooms'\n    listUrl  <- xpathSApply(rootNode,\"//details_url\",xmlValue)\n    \n    output$histrent <- renderPlot({\n      \n      validate(\n        need(priceMax()-priceMin() >=0., \"'Max Price' must be greater than or equal to 'Min Price' \"),\n        need(bedMax()-bedMin() >=0., \"'Max Beds' must be greater than or equal to 'Min Beds' \"),\n        need(nrow(price)>5, \"Less than 5 properties found in this price range. Try increasing Max Price\" )\n      )\n      \n      \n      bed.df <- data.frame(price,nbed)\n      bed.df$number_of_bedrooms <- gsub('([0-9])',\"\\\\1 bedroom\", bed.df$number_of_bedrooms)\n      \n      \n      countTot<-aggregate(bed.df[, 1], list(bed.df$number_of_bedrooms), function(x) length(unique(x)))\n      colnames(countTot)=c('Number of Bedrooms','Total Number of Properties')\n      meanPrice<-aggregate(bed.df[, 1], list(bed.df$number_of_bedrooms), mean)\n      colnames(meanPrice)=c('Number of Bedrooms','Average Price (£)')\n      medPrice<-aggregate(bed.df[, 1], list(bed.df$number_of_bedrooms), median)\n      colnames(medPrice)=c('Number of Bedrooms','Median Price (£)')\n      allPrice <- merge(meanPrice,medPrice,by='Number of Bedrooms')\n      allPrice <- merge(allPrice,countTot,by='Number of Bedrooms')\n      \n      \n      g<- ggplot(bed.df, aes(price, fill = number_of_bedrooms)) + geom_density(alpha = 0.5) \n      g<- ggplotGrob(g)  \n      g<- gtable_add_rows(g, unit(1.5,\"in\"), 0) \n      g<- gtable_add_grob(g, tableGrob(allPrice, rows = rownames(allPrice), cols = colnames(allPrice)),\n                          t = 1, l=4, b=1, r=4)\n      g<- gtable_add_rows(g, unit(1,\"in\"), 0) \n      \n      \n      histtitle = paste(propType(),\" near\",loc(),\"(sourced from Zoopla)\",sep=\" \")\n      title_style <- g$grobs[[8]]$gp\n      g <- gtable_add_grob(g, textGrob(histtitle, x=0, hjust=0, gp=title_style),\n                           t=1, l=4, b=1, r=4, name=\"hist-title\")\n      \n      # grid.newpage()\n      grid.draw(g)\n      # link = response[1]\n      \n      # output$zoopres <- renderUI({ a(href=link) })\n      output$pErr    <- renderText({paste(\"\")})\n      \n    }, height = 400, width = 600)\n    \n    #     output$transtable <- renderPlot({\n    #       \n    #       #Now Query Google maps for transit times from this area\n    #       \n    #       #get nearby stations to properties \n    #       stations = unique(xpathSApply(html,\"//*[@class='nearby_stations_schools_name']\",xmlValue))\n    #       gStations = paste(stations, collapse = '|') \n    #       \n    #       \n    #       mode=\"transit\"\n    #       transit_mode=\"rail\"\n    #       to=\"Farringdon\"\n    #       from=gStations\n    #       region=\"uk\"\n    #       key=\"AIzaSyDi5gaiVz3Eq3xMg6ndUC5X3bhQLxY_F4w\" \n    #       url    <- \"https://maps.googleapis.com/maps/api/distancematrix/xml\"\n    #       response <- GET(url,query=list(\n    #         origins=from,\n    #         destinations=to,\n    #         region=region,\n    #         mode=mode,\n    #         transit_mode=transit_mode,\n    #         key=key\n    #       ))\n    #       doc      <- content(response,type=\"text/xml\")\n    #       status   <- sapply(doc[\"//row/element/status\"],xmlValue)\n    #       if(any(status!=\"OK\")) warning(\"Error Status on some routes\")\n    #       durationText <- sapply(doc[\"//row/element/duration/text\"],xmlValue)\n    #       durationNum <- as.numeric(sapply(doc[\"//row/element/duration/value\"],xmlValue))/60\n    #       \n    #       print(durationText)\n    #       \n    #       df_train<- data.frame(stations,durationText,as.integer(durationNum))\n    #       colnames(df_train) = c(\"Stations\", \"Total Transit time\", \"(mins)\") \n    #       \n    #       tt <- tableGrob(df_train)\n    #       # grid.newpage()\n    #       # grid.arrange(g,tt,nrow=2,ncol=1)\n    #       grid.draw(tt)\n    #       \n    #       \n    #     }, height = 200, width = 600)\n    \n  })\n})\n",
    "created" : 1449176126248.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2809161437",
    "id" : "D7DDDC35",
    "lastKnownWriteTime" : 1449606928,
    "path" : "~/GitHub/app/testing/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}